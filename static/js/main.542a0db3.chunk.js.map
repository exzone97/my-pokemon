{"version":3,"sources":["redux/reducer/globalActionType.js","redux/reducer/globalReducer.js","polyfill.js","App.js","serviceWorker.js","index.js","service/Config.js","service/Get.js","service/index.js"],"names":["ActionType","GET_POKEMON_TYPES","GET_POKEMON_OWNED","GET_POKEMON_OWNED_COUNT","GET_POKEMON_SPECIES","GET_POKEMON","globalState","pokemonTypes","pokemonOwned","pokemonOwnedCount","pokemonSpecies","pokemon","getInitalData","dispatch","a","API","getPokemonTypes","type","getPokemonOwned","getPokemonOwnedCount","getPokemonSpecies","getPokemon","console","log","store","createStore","state","action","applyMiddleware","thunkMiddleware","window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","DefaultLayout","React","lazy","App","props","basename","process","Suspense","fallback","className","path","name","render","Component","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","rootPath","onlinePath","Get","root","Promise","resolve","reject","axios","get","res","data","err","getPokemonList","offset","getPokemonOwnedCountID","id","getPokemonOwnedID","getPokemonTypesData","getPokemonSpeciesOffset","getPokemonData","getPokemonOffset","getPokemonSpeciesData","getAbilityData","getMoveData","getStatData","postPokemon","pokemon_id","nickname","deletePokemon"],"mappings":"uJAQeA,EARI,CACfC,kBAAmB,oBACnBC,kBAAmB,oBACnBC,wBAAyB,0BACzBC,oBAAqB,sBACrBC,YAAa,e,2DCAjB,IAAMC,EAAc,CAChBC,aAAc,GACdC,aAAc,GACdC,kBAAmB,GACnBC,eAAgB,GAChBC,QAAS,IAoCN,IAAMC,EAAgB,yDAAM,WAAMC,GAAN,uBAAAC,EAAA,+EAEFC,IAAIC,kBAFF,cAEvBT,EAFuB,OAG3BM,EAAS,CAAEI,KAAMjB,EAAWC,kBAAmBM,iBAHpB,SAIFQ,IAAIG,kBAJF,cAIvBV,EAJuB,OAK3BK,EAAS,CAAEI,KAAMjB,EAAWE,kBAAmBM,iBALpB,UAMGO,IAAII,uBANP,eAMvBV,EANuB,OAO3BI,EAAS,CAAEI,KAAMjB,EAAWG,wBAAyBM,sBAP1B,UAQAM,IAAIK,oBARJ,eAQvBV,EARuB,OAS3BG,EAAS,CAAEI,KAAMjB,EAAWI,oBAAqBM,mBATtB,UAUPK,IAAIM,aAVG,QAUvBV,EAVuB,OAW3BE,EAAS,CAAEI,KAAMjB,EAAWK,YAAaM,YAXd,kDAa3BW,QAAQC,IAAR,MAb2B,0DAAN,uDAiBvBC,EAAQC,aAjDd,WAAmD,IAA9BC,EAA6B,uDAArBpB,EAAaqB,EAAQ,uCAC9C,OAAQA,EAAOV,MACX,KAAKjB,EAAWC,kBACZ,OAAO,eACAyB,EADP,CAEInB,aAAcoB,EAAOpB,eAE7B,KAAKP,EAAWE,kBAChB,OAAO,eACAwB,EADP,CAEIlB,aAAcmB,EAAOnB,eAEzB,KAAKR,EAAWG,wBAChB,OAAO,eACAuB,EADP,CAEIjB,kBAAmBkB,EAAOlB,oBAE9B,KAAKT,EAAWI,oBAChB,OAAO,eACAsB,EADP,CAEIhB,eAAgBiB,EAAOjB,iBAE3B,KAAKV,EAAWK,YACZ,OAAO,eACAqB,EADP,CAEIf,QAASgB,EAAOhB,UAExB,QACI,OAAOe,KAqBoBE,YAAgBC,MAExCL,O,o/DClCf,WAEE,GAAmC,oBAAvBM,OAAOC,YAA6B,OAAO,EAEvD,SAASA,EAAcC,EAAOC,GAC5BA,EAASA,GAAU,CAAEC,SAAS,EAAOC,YAAY,EAAOC,YAAQC,GAChE,IAAIC,EAAMC,SAASC,YAAa,eAEhC,OADAF,EAAIG,gBAAiBT,EAAOC,EAAOC,QAASD,EAAOE,WAAYF,EAAOG,QAC/DE,EAGTP,EAAYW,UAAYZ,OAAOa,MAAMD,UAErCZ,OAAOC,YAAcA,EAbvB,G,sHC1BMa,EAAgBC,IAAMC,MAAK,kBAAM,iCA2BxBC,E,YAxBd,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KACDtB,MAAQ,GAFI,E,mHAUjB,OACC,kBAAC,WAAD,KACC,kBAAC,IAAD,CAAeuB,SAAUC,eACxB,kBAAC,IAAMC,SAAP,CAAgBC,SAjBC,yBAAKC,UAAU,oCAAf,eAkBhB,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,IAAIC,KAAK,UAAUC,OAAQ,SAAAR,GAAK,OAAK,kBAACJ,EAAkBI,c,GAhBzDS,aCKEC,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2D,sBCNNC,IAASN,OAAO,kBAAC,IAAD,CAAUhC,MAAOA,KAAO,kBAAC,EAAD,OAAoBe,SAASwB,eAAe,SDuH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,a,qDEzIfC,EAAW,2CACXC,EAAa,4BCeXC,EAbH,SAACrB,EAAMsB,GASf,OARgB,IAAIC,SAAQ,SAACC,EAASC,GAClCC,IAAMC,IAAN,UAAaL,EAAOF,EAAaD,EAAjC,YAA6CnB,IAC5Ca,MAAK,SAACe,GACHJ,EAAQI,EAAIC,SACb,SAACC,GACAL,EAAOK,UCuBbrE,EAAM,CAERsE,eAxBmB,SAACC,GAAD,OAAYX,EAAI,kBAAD,OAAmBW,EAAnB,cAAsC,IAyBxEpE,gBA7BoB,kBAAMyD,EAAI,4BAA4B,IA8B1DxD,qBA7ByB,kBAAMwD,EAAI,qCAAqC,IA8BxEY,uBA7B2B,SAACC,GAAD,OAAQb,EAAI,wCAAD,OAAyCa,IAAM,IA8BrFC,kBA7BsB,SAACD,GAAD,OAAQb,EAAI,+BAAD,OAAgCa,IAAM,IA8BvExE,gBA5BoB,kBAAM2D,EAAI,QAAQ,IA6BtCe,oBA5BwB,SAACF,GAAD,OAAQb,EAAI,QAAD,OAASa,IAAM,IA6BlDpE,kBA5BsB,kBAAMuD,EAAI,mBAAmB,IA6BnDgB,wBA5B4B,SAACL,GAAD,OAAYX,EAAI,0BAAD,OAA2BW,EAA3B,cAA8C,IA6BzFjE,WA1Be,kBAAMsD,EAAI,WAAW,IA2BpCiB,eA5BmB,SAACJ,GAAD,OAAQb,EAAI,WAAD,OAAYa,IAAM,IA6BhDK,iBA3BqB,SAACP,GAAD,OAAYX,EAAI,kBAAD,OAAmBW,EAAnB,cAAsC,IA4B1EQ,sBA/B0B,SAACN,GAAD,OAAQb,EAAI,mBAAD,OAAoBa,IAAM,IAgC/DO,eA5BmB,SAACP,GAAD,OAAQb,EAAI,WAAD,OAAYa,IAAM,IA6BhDQ,YA5BgB,SAACR,GAAD,OAAQb,EAAI,QAAD,OAASa,IAAM,IA6B1CS,YA5BgB,SAACT,GAAD,OAAQb,EAAI,QAAD,OAASa,IAAM,IA8B1CU,YArBgB,SAACC,EAAYC,GAAb,OAA0BzB,EAAI,wCAAD,OAAyCwB,EAAzC,qBAAgEC,IAAY,IAuBzHC,cA5BkB,SAACb,GAAD,OAAQb,EAAI,+BAAD,OAAgCa,IAAM,KAiCxDzE,Q","file":"static/js/main.542a0db3.chunk.js","sourcesContent":["const ActionType = {\r\n    GET_POKEMON_TYPES: 'GET_POKEMON_TYPES',\r\n    GET_POKEMON_OWNED: 'GET_POKEMON_OWNED',\r\n    GET_POKEMON_OWNED_COUNT: 'GET_POKEMON_OWNED_COUNT',\r\n    GET_POKEMON_SPECIES: 'GET_POKEMON_SPECIES',\r\n    GET_POKEMON: 'GET_POKEMON',\r\n}\r\n\r\nexport default ActionType;","import ActionType from './globalActionType';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport API from '../../service';\r\n\r\nconst globalState = {\r\n    pokemonTypes: [],\r\n    pokemonOwned: [],\r\n    pokemonOwnedCount: [],\r\n    pokemonSpecies: [],\r\n    pokemon: []\r\n}\r\n\r\n//reducer \r\nfunction rootReducer(state = globalState, action) {\r\n    switch (action.type) {\r\n        case ActionType.GET_POKEMON_TYPES:\r\n            return {\r\n                ...state,\r\n                pokemonTypes: action.pokemonTypes,\r\n            };\r\n        case ActionType.GET_POKEMON_OWNED:\r\n        return {\r\n            ...state,\r\n            pokemonOwned: action.pokemonOwned,\r\n        };\r\n        case ActionType.GET_POKEMON_OWNED_COUNT:\r\n        return {\r\n            ...state,\r\n            pokemonOwnedCount: action.pokemonOwnedCount,\r\n        };\r\n        case ActionType.GET_POKEMON_SPECIES:\r\n        return {\r\n            ...state,\r\n            pokemonSpecies: action.pokemonSpecies,\r\n        };\r\n        case ActionType.GET_POKEMON:\r\n            return {\r\n                ...state,\r\n                pokemon: action.pokemon,\r\n            };        \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getInitalData = () => async dispatch => {\r\n    try {\r\n        let pokemonTypes = await API.getPokemonTypes();\r\n        dispatch({ type: ActionType.GET_POKEMON_TYPES, pokemonTypes });\r\n        let pokemonOwned = await API.getPokemonOwned();\r\n        dispatch({ type: ActionType.GET_POKEMON_OWNED, pokemonOwned });\r\n        let pokemonOwnedCount = await API.getPokemonOwnedCount();\r\n        dispatch({ type: ActionType.GET_POKEMON_OWNED_COUNT, pokemonOwnedCount });\r\n        let pokemonSpecies = await API.getPokemonSpecies();\r\n        dispatch({ type: ActionType.GET_POKEMON_SPECIES, pokemonSpecies });\r\n        let pokemon = await API.getPokemon();\r\n        dispatch({ type: ActionType.GET_POKEMON, pokemon });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","/*\r\n* required polyfills\r\n*/\r\nimport \"core-js\";\r\nimport 'core-js/features/set/map';\r\n\r\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\r\n// import 'core-js/es6/symbol'\r\n// import 'core-js/es6/object'\r\n// import 'core-js/es6/function'\r\n// import 'core-js/es6/parse-int'\r\n// import 'core-js/es6/parse-float'\r\n// import 'core-js/es6/number'\r\n// import 'core-js/es6/math'\r\n// import 'core-js/es6/string'\r\n// import 'core-js/es6/date'\r\n// import 'core-js/es6/array'\r\n// import 'core-js/es6/regexp'\r\n// import 'core-js/es6/map'\r\n// import 'core-js/es6/weak-map'\r\n// import 'core-js/es6/set'\r\n// import 'core-js/es7/object'\r\n\r\n/** IE10 and IE11 requires the following for the Reflect API. */\r\n// import 'core-js/es6/reflect'\r\n\r\n/** Evergreen browsers require these. **/\r\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\r\n// import 'core-js/es7/reflect'\r\n\r\n// CustomEvent() constructor functionality in IE9, IE10, IE11\r\n(function () {\r\n\r\n  if ( typeof window.CustomEvent === \"function\" ) return false\r\n\r\n  function CustomEvent ( event, params ) {\r\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\r\n    var evt = document.createEvent( 'CustomEvent' )\r\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail )\r\n    return evt\r\n  }\r\n\r\n  CustomEvent.prototype = window.Event.prototype\r\n\r\n  window.CustomEvent = CustomEvent\r\n})()\r\n","import React, { Component, Fragment } from 'react';\r\nimport './App.css';\r\nimport { HashRouter, Route, Switch, Link, BrowserRouter } from 'react-router-dom';\r\n\r\nconst loading = () => <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>;\r\nconst DefaultLayout = React.lazy(() => import('./DefaultLayout'));\r\n\r\nclass App extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t}\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<BrowserRouter basename={process.env.PUBLIC_URL}>\r\n\t\t\t\t\t<React.Suspense fallback={loading()}>\r\n\t\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t\t<Route path=\"/\" name=\"Pokemon\" render={props => (<DefaultLayout {...props} />)}/>\r\n\t\t\t\t\t\t</Switch>\r\n\t\t\t\t\t</React.Suspense>\r\n\t\t\t\t</BrowserRouter>\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'react-app-polyfill/ie9'; // For IE 9-11 support\r\nimport 'react-app-polyfill/stable';\r\nimport 'react-app-polyfill/ie11'; // For IE 11 support\r\nimport './polyfill'\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport store from './redux/reducer/globalReducer';\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const rootPath = 'https://my-pokemon-api.000webhostapp.com';\r\nexport const onlinePath = 'https://pokeapi.co/api/v2'; // URL for online API","import axios from 'axios';\r\nimport {onlinePath, rootPath} from './Config';\r\n\r\nconst Get = (path, root) =>{\r\n    const promise = new Promise((resolve, reject)=> {\r\n        axios.get(`${root ? onlinePath : rootPath}/${path}`)\r\n        .then((res)=>{\r\n            resolve(res.data);\r\n        }, (err) =>{\r\n            reject(err);\r\n        })\r\n    })\r\n    return promise;\r\n}\r\n\r\n\r\nexport default Get;","import Get from './Get'\r\nimport Post from './Post'\r\n// import Put from './Put'\r\nimport Delete from './Delete'\r\n\r\n\r\nconst getPokemonOwned = () => Get('/Get/GetPokemonOwned.php', false);\r\nconst getPokemonOwnedCount = () => Get(`/Get/GetPokemonOwnedWithCount.php`, false);\r\nconst getPokemonOwnedCountID = (id) => Get(`/Get/GetPokemonOwnedWithCount.php?id=${id}`, false);\r\nconst getPokemonOwnedID = (id) => Get(`/Get/GetPokemonOwned.php?id=${id}`, false);\r\nconst getPokemonList = (offset) => Get(`pokemon?offset=${offset}&limit=20`, true);\r\nconst getPokemonTypes = () => Get('type', true);\r\nconst getPokemonTypesData = (id) => Get(`type/${id}`, true);\r\nconst getPokemonSpecies = () => Get('pokemon-species', true);\r\nconst getPokemonSpeciesOffset = (offset) => Get(`pokemon-species?offset=${offset}&limit=20`, true);\r\nconst getPokemonSpeciesData = (id) => Get(`pokemon-species/${id}`, true);\r\nconst getPokemonData = (id) => Get(`pokemon/${id}`, true);\r\nconst getPokemon = () => Get(`pokemon`, true);\r\nconst getPokemonOffset = (offset) => Get(`pokemon?offset=${offset}&limit=20`, true);\r\nconst getAbilityData = (id) => Get(`ability/${id}`, true)\r\nconst getMoveData = (id) => Get(`move/${id}`, true);\r\nconst getStatData = (id) => Get(`stat/${id}`, true);\r\n\r\n// Other way to Delelte data, but im using Get method cause the other method fail when I deploy the website.  \r\n// const deletePokemon = (id) => Delete(`Delete/DeletePokemon.php?id=${id}`, false);\r\nconst deletePokemon = (id) => Get(`Delete/DeletePokemon.php?id=${id}`, false);\r\n\r\n// Other way to Post data, but im using Get method cause the other method fail when I deploy the website. If using Post method we need to\r\n// change the param where the method called.\r\n// const postPokemon = (data) => Post(`Post/PostPokemonOwned.php`, false, data);\r\nconst postPokemon = (pokemon_id, nickname) => Get(`Post/PostPokemonOwned.php?pokemon_id=${pokemon_id}&nickname=${nickname}`, false);\r\n\r\nconst API = {\r\n    //GET\r\n    getPokemonList,\r\n    getPokemonOwned,\r\n    getPokemonOwnedCount,\r\n    getPokemonOwnedCountID,\r\n    getPokemonOwnedID,\r\n    getPokemonTypes,\r\n    getPokemonTypesData,\r\n    getPokemonSpecies,\r\n    getPokemonSpeciesOffset,\r\n    getPokemon,\r\n    getPokemonData,\r\n    getPokemonOffset,\r\n    getPokemonSpeciesData,\r\n    getAbilityData,\r\n    getMoveData,\r\n    getStatData,\r\n    //POST\r\n    postPokemon,\r\n    //DELETE\r\n    deletePokemon\r\n    //PUT\r\n\r\n}\r\n\r\nexport default API;"],"sourceRoot":""}